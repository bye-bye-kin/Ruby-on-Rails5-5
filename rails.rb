不正な投稿データを制限する機能を作っていきます。
空の投稿、140文字を超える投稿をできないようにします。

バリデーション
不正なデータがデータベースに保存されないように、データをチェックする仕組み。
バリデーションに引っかかった場合（不正なデータの場合）にはデータベースに保存されません。

##バリデーションはモデルで設定します。 
##「validates」を用いてカラム名と内容を指定します。
##{presence: true}を用いることで、「そのカラムの値が存在するかどうか」をチェックすることができます。

validates　:検証するカラム名,｛検証する内容｝
→validates :content , {presence: true}

################################################################################################################

文字数を制限する
バリデーションでは、値が存在しているかだけでなく、文字数もチェックすることができます。
「length」を用い、{maximum: 数値}を指定することで、最大文字数を設定することができます。

varidates :content,{length:{maximum:140}}

バリデーションで検証する内容は実はハッシュとなっており、コンマ( , )で区切ることで、複数指定することができます。
validates :content, {presence: true , length:{maximum:140}}

###################################################################################################################
バリデーションに引っかかったら、もう一度入力フォームに戻るようにする
→まず、バリデーションの結果によって、 save メソッドが異なる結果になる

投稿をデータベースに保存するために使ってきた「saveメソッド」は、保存に成功した場合は「true」を、
バリデーションに引っかかって保存に失敗した場合は「false」を戻り値として返すようになっています。

####################################################################################################################

バリデーションの結果で表示するページを変える
投稿を保存できなかった場合は投稿一覧ページの代わりに投稿編集ページに転送するようにしましょう。
saveメソッドの戻り値をif文の条件式としましょう。

if @post.save
    redirect_to("/posts/index")
    
  else redirect_to("/posts/#{@post.id}/edit")
  end
  
  ##################################################################################################################

直前の入力内容を初期値としてフォームに入れる方法を学んでみよう。
→140字以上書いたらやり直せって全部消えた...ってならないように。

そもそもなぜ投稿失敗時に直前の投稿内容が消えてしまうのか
①updateアクションでは、投稿失敗時にeditアクションに転送している
②editアクションでは、データベースから編集前のデータを取得している
③フォームの初期値は、②で取得した@post.contentの内容である
以上の理由から、投稿失敗時には直前の内容ではなく編集前のデータが表示されてしまいます。


updateアクションの@postには直前の編集内容が入っているので、この@postをedit.html.erbで利用できるようにすれば、
直前の編集内容を表示できるようになります。 

renderメソッド
別のアクションを経由せずに、直接ビューを表示することができます。
render("フォルダ名/ファイル名")のように表示したいビューを指定します。
renderメソッドを使うと、redirect_toメソッドを使った場合と違い、
そのアクション内で定義した@変数をビューでそのまま使うことができます。



#######################################################################################################################

エラーメッセージを表示しよう

saveメソッドを呼び出した際にバリデーションに失敗すると、Railsでは自動的にエラーメッセージが生成されるようになっています。
@post.errors.full_messagesの中に、エラー内容が配列で入ります。
→edit.html.erbのフォームの上で、each文を用いてエラー文を１つずつ表示しましょう。

############################################################################################

サクセスメッセージを表示しよう

ただし投稿した直後だけ表示して、それ以降は表示しないようにしよう。
→ページ上に1度だけ表示されるメッセージをフラッシュといいます。
フラッシュが表示された後、ページを更新したり、別のページに移動したりすると、フラッシュは表示されなくなります。

変数flash
アクションで変数flash[:notice]に文字列を代入すると、flash[:notice]をビューで使うことができます。
これは１度表示された後に自動で削除されるようになっています。
flashはいろいろな箇所で共通で使っていくのでapplication.html.erbで表示しましょう。

#/controllers/posts_controller.rb

if @post.save
    # 変数flash[:notice]に指定されたメッセージを代入してください
    flash[:notice]= "投稿を編集しました"

#./layouts/application.html.erb
<% if flash[:notice] %>    #flash[:notice] がある場合に限り、
      <div class="flash">　　　
        <%= flash[:notice] %>　　　　#flash[:notice] を表示する（表示する文字は既にrbで代入されている）
      </div>
#    <% end %>

###################################################################################################################

新規投稿に失敗した時に、再び新規投稿ページを表示するようにしてみよう。

def create
    @post = Post.new(content: params[:content])
   if @post.save
    redirect_to("/posts/index")
   else 
     render("posts/new")
   end
  end

##################################################################################################

新規投稿失敗時にエラーメッセージと直前の投稿内容が入るようにしよう。

#①まずは、エラーメッセージを表示していきましょう。
#/posts/new.html.erb
<div class="form-body">
          <% @post.errors.full_messages.each do |message| %>
            <div class="form-error">
              <%= message %>
            </div>

#②続いて、フォームの初期値として直前の投稿内容を表示しましょう。
#/posts/new.html.erb

<textarea name="content"><%=@post.content%></textarea>

#new.html.erbは本来、newアクションを経由して表示されるビューですが、newアクションでは、まだ変数@postが定義されていません。
#このままではnewアクションを経由した時(「localhost:3000/posts/new」にアクセスした時)に、エラーとなってしまいます。
#/controllers/posts_controller.rb
def new
    @post=Post.new
  end

########################################################################################################################

新規投稿、削除機能のサクセスメッセージ

#createアクションにて
flash[:notice]="投稿を作成しました"
      
#destroyアクションにて
flash[:notice] = "投稿を削除しました"